// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Resume resume
//
// swagger:model Resume
type Resume struct {

	// awards
	Awards []*ResumeAwardsItems0 `json:"awards"`

	// basics
	Basics *ResumeBasics `json:"basics,omitempty"`

	// certificates
	Certificates []*ResumeCertificatesItems0 `json:"certificates"`

	// education
	Education []*ResumeEducationItems0 `json:"education"`

	// interests
	Interests []*ResumeInterestsItems0 `json:"interests"`

	// languages
	Languages []*ResumeLanguagesItems0 `json:"languages"`

	// projects
	Projects []*ResumeProjectsItems0 `json:"projects"`

	// publications
	Publications []*ResumePublicationsItems0 `json:"publications"`

	// references
	References []*ResumeReferencesItems0 `json:"references"`

	// skills
	Skills []*ResumeSkillsItems0 `json:"skills"`

	// volunteer
	Volunteer []*ResumeVolunteerItems0 `json:"volunteer"`

	// work
	Work []*ResumeWorkItems0 `json:"work"`
}

// Validate validates this resume
func (m *Resume) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAwards(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBasics(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCertificates(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEducation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInterests(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLanguages(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProjects(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePublications(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReferences(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSkills(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVolunteer(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWork(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Resume) validateAwards(formats strfmt.Registry) error {
	if swag.IsZero(m.Awards) { // not required
		return nil
	}

	for i := 0; i < len(m.Awards); i++ {
		if swag.IsZero(m.Awards[i]) { // not required
			continue
		}

		if m.Awards[i] != nil {
			if err := m.Awards[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("awards" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("awards" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Resume) validateBasics(formats strfmt.Registry) error {
	if swag.IsZero(m.Basics) { // not required
		return nil
	}

	if m.Basics != nil {
		if err := m.Basics.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("basics")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("basics")
			}
			return err
		}
	}

	return nil
}

func (m *Resume) validateCertificates(formats strfmt.Registry) error {
	if swag.IsZero(m.Certificates) { // not required
		return nil
	}

	for i := 0; i < len(m.Certificates); i++ {
		if swag.IsZero(m.Certificates[i]) { // not required
			continue
		}

		if m.Certificates[i] != nil {
			if err := m.Certificates[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("certificates" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("certificates" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Resume) validateEducation(formats strfmt.Registry) error {
	if swag.IsZero(m.Education) { // not required
		return nil
	}

	for i := 0; i < len(m.Education); i++ {
		if swag.IsZero(m.Education[i]) { // not required
			continue
		}

		if m.Education[i] != nil {
			if err := m.Education[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("education" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("education" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Resume) validateInterests(formats strfmt.Registry) error {
	if swag.IsZero(m.Interests) { // not required
		return nil
	}

	for i := 0; i < len(m.Interests); i++ {
		if swag.IsZero(m.Interests[i]) { // not required
			continue
		}

		if m.Interests[i] != nil {
			if err := m.Interests[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("interests" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("interests" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Resume) validateLanguages(formats strfmt.Registry) error {
	if swag.IsZero(m.Languages) { // not required
		return nil
	}

	for i := 0; i < len(m.Languages); i++ {
		if swag.IsZero(m.Languages[i]) { // not required
			continue
		}

		if m.Languages[i] != nil {
			if err := m.Languages[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("languages" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("languages" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Resume) validateProjects(formats strfmt.Registry) error {
	if swag.IsZero(m.Projects) { // not required
		return nil
	}

	for i := 0; i < len(m.Projects); i++ {
		if swag.IsZero(m.Projects[i]) { // not required
			continue
		}

		if m.Projects[i] != nil {
			if err := m.Projects[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("projects" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("projects" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Resume) validatePublications(formats strfmt.Registry) error {
	if swag.IsZero(m.Publications) { // not required
		return nil
	}

	for i := 0; i < len(m.Publications); i++ {
		if swag.IsZero(m.Publications[i]) { // not required
			continue
		}

		if m.Publications[i] != nil {
			if err := m.Publications[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("publications" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("publications" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Resume) validateReferences(formats strfmt.Registry) error {
	if swag.IsZero(m.References) { // not required
		return nil
	}

	for i := 0; i < len(m.References); i++ {
		if swag.IsZero(m.References[i]) { // not required
			continue
		}

		if m.References[i] != nil {
			if err := m.References[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("references" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("references" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Resume) validateSkills(formats strfmt.Registry) error {
	if swag.IsZero(m.Skills) { // not required
		return nil
	}

	for i := 0; i < len(m.Skills); i++ {
		if swag.IsZero(m.Skills[i]) { // not required
			continue
		}

		if m.Skills[i] != nil {
			if err := m.Skills[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("skills" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("skills" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Resume) validateVolunteer(formats strfmt.Registry) error {
	if swag.IsZero(m.Volunteer) { // not required
		return nil
	}

	for i := 0; i < len(m.Volunteer); i++ {
		if swag.IsZero(m.Volunteer[i]) { // not required
			continue
		}

		if m.Volunteer[i] != nil {
			if err := m.Volunteer[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("volunteer" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("volunteer" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Resume) validateWork(formats strfmt.Registry) error {
	if swag.IsZero(m.Work) { // not required
		return nil
	}

	for i := 0; i < len(m.Work); i++ {
		if swag.IsZero(m.Work[i]) { // not required
			continue
		}

		if m.Work[i] != nil {
			if err := m.Work[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("work" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("work" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this resume based on the context it is used
func (m *Resume) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAwards(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateBasics(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCertificates(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEducation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateInterests(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLanguages(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateProjects(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePublications(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateReferences(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSkills(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVolunteer(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateWork(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Resume) contextValidateAwards(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Awards); i++ {

		if m.Awards[i] != nil {

			if swag.IsZero(m.Awards[i]) { // not required
				return nil
			}

			if err := m.Awards[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("awards" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("awards" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Resume) contextValidateBasics(ctx context.Context, formats strfmt.Registry) error {

	if m.Basics != nil {

		if swag.IsZero(m.Basics) { // not required
			return nil
		}

		if err := m.Basics.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("basics")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("basics")
			}
			return err
		}
	}

	return nil
}

func (m *Resume) contextValidateCertificates(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Certificates); i++ {

		if m.Certificates[i] != nil {

			if swag.IsZero(m.Certificates[i]) { // not required
				return nil
			}

			if err := m.Certificates[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("certificates" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("certificates" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Resume) contextValidateEducation(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Education); i++ {

		if m.Education[i] != nil {

			if swag.IsZero(m.Education[i]) { // not required
				return nil
			}

			if err := m.Education[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("education" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("education" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Resume) contextValidateInterests(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Interests); i++ {

		if m.Interests[i] != nil {

			if swag.IsZero(m.Interests[i]) { // not required
				return nil
			}

			if err := m.Interests[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("interests" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("interests" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Resume) contextValidateLanguages(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Languages); i++ {

		if m.Languages[i] != nil {

			if swag.IsZero(m.Languages[i]) { // not required
				return nil
			}

			if err := m.Languages[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("languages" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("languages" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Resume) contextValidateProjects(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Projects); i++ {

		if m.Projects[i] != nil {

			if swag.IsZero(m.Projects[i]) { // not required
				return nil
			}

			if err := m.Projects[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("projects" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("projects" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Resume) contextValidatePublications(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Publications); i++ {

		if m.Publications[i] != nil {

			if swag.IsZero(m.Publications[i]) { // not required
				return nil
			}

			if err := m.Publications[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("publications" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("publications" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Resume) contextValidateReferences(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.References); i++ {

		if m.References[i] != nil {

			if swag.IsZero(m.References[i]) { // not required
				return nil
			}

			if err := m.References[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("references" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("references" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Resume) contextValidateSkills(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Skills); i++ {

		if m.Skills[i] != nil {

			if swag.IsZero(m.Skills[i]) { // not required
				return nil
			}

			if err := m.Skills[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("skills" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("skills" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Resume) contextValidateVolunteer(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Volunteer); i++ {

		if m.Volunteer[i] != nil {

			if swag.IsZero(m.Volunteer[i]) { // not required
				return nil
			}

			if err := m.Volunteer[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("volunteer" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("volunteer" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Resume) contextValidateWork(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Work); i++ {

		if m.Work[i] != nil {

			if swag.IsZero(m.Work[i]) { // not required
				return nil
			}

			if err := m.Work[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("work" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("work" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *Resume) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Resume) UnmarshalBinary(b []byte) error {
	var res Resume
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ResumeAwardsItems0 resume awards items0
//
// swagger:model ResumeAwardsItems0
type ResumeAwardsItems0 struct {

	// awarder
	// Example: Company
	Awarder string `json:"awarder,omitempty"`

	// date
	// Example: 2014-11-01
	// Format: date
	Date strfmt.Date `json:"date,omitempty"`

	// summary
	// Example: There is no spoon.
	Summary string `json:"summary,omitempty"`

	// title
	// Example: Award
	Title string `json:"title,omitempty"`
}

// Validate validates this resume awards items0
func (m *ResumeAwardsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ResumeAwardsItems0) validateDate(formats strfmt.Registry) error {
	if swag.IsZero(m.Date) { // not required
		return nil
	}

	if err := validate.FormatOf("date", "body", "date", m.Date.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this resume awards items0 based on context it is used
func (m *ResumeAwardsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ResumeAwardsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ResumeAwardsItems0) UnmarshalBinary(b []byte) error {
	var res ResumeAwardsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ResumeBasics resume basics
//
// swagger:model ResumeBasics
type ResumeBasics struct {

	// email
	// Example: john@gmail.com
	Email string `json:"email,omitempty"`

	// image
	// Example: https://johndoe.com/me.jpg
	Image string `json:"image,omitempty"`

	// label
	// Example: Programmer
	Label string `json:"label,omitempty"`

	// location
	Location *ResumeBasicsLocation `json:"location,omitempty"`

	// name
	// Example: John Doe
	Name string `json:"name,omitempty"`

	// phone
	// Example: (912) 555-4321
	Phone string `json:"phone,omitempty"`

	// profiles
	Profiles []*ResumeBasicsProfilesItems0 `json:"profiles"`

	// summary
	// Example: A summary of John Doe…
	Summary string `json:"summary,omitempty"`

	// url
	// Example: https://johndoe.com
	URL string `json:"url,omitempty"`
}

// Validate validates this resume basics
func (m *ResumeBasics) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLocation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProfiles(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ResumeBasics) validateLocation(formats strfmt.Registry) error {
	if swag.IsZero(m.Location) { // not required
		return nil
	}

	if m.Location != nil {
		if err := m.Location.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("basics" + "." + "location")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("basics" + "." + "location")
			}
			return err
		}
	}

	return nil
}

func (m *ResumeBasics) validateProfiles(formats strfmt.Registry) error {
	if swag.IsZero(m.Profiles) { // not required
		return nil
	}

	for i := 0; i < len(m.Profiles); i++ {
		if swag.IsZero(m.Profiles[i]) { // not required
			continue
		}

		if m.Profiles[i] != nil {
			if err := m.Profiles[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("basics" + "." + "profiles" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("basics" + "." + "profiles" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this resume basics based on the context it is used
func (m *ResumeBasics) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateLocation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateProfiles(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ResumeBasics) contextValidateLocation(ctx context.Context, formats strfmt.Registry) error {

	if m.Location != nil {

		if swag.IsZero(m.Location) { // not required
			return nil
		}

		if err := m.Location.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("basics" + "." + "location")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("basics" + "." + "location")
			}
			return err
		}
	}

	return nil
}

func (m *ResumeBasics) contextValidateProfiles(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Profiles); i++ {

		if m.Profiles[i] != nil {

			if swag.IsZero(m.Profiles[i]) { // not required
				return nil
			}

			if err := m.Profiles[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("basics" + "." + "profiles" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("basics" + "." + "profiles" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ResumeBasics) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ResumeBasics) UnmarshalBinary(b []byte) error {
	var res ResumeBasics
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ResumeBasicsLocation resume basics location
//
// swagger:model ResumeBasicsLocation
type ResumeBasicsLocation struct {

	// address
	// Example: 2712 Broadway St
	Address string `json:"address,omitempty"`

	// city
	// Example: San Francisco
	City string `json:"city,omitempty"`

	// country code
	// Example: US
	CountryCode string `json:"countryCode,omitempty"`

	// postal code
	// Example: CA 94115
	PostalCode string `json:"postalCode,omitempty"`

	// region
	// Example: California
	Region string `json:"region,omitempty"`
}

// Validate validates this resume basics location
func (m *ResumeBasicsLocation) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this resume basics location based on context it is used
func (m *ResumeBasicsLocation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ResumeBasicsLocation) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ResumeBasicsLocation) UnmarshalBinary(b []byte) error {
	var res ResumeBasicsLocation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ResumeBasicsProfilesItems0 resume basics profiles items0
//
// swagger:model ResumeBasicsProfilesItems0
type ResumeBasicsProfilesItems0 struct {

	// network
	// Example: Twitter
	Network string `json:"network,omitempty"`

	// url
	// Example: https://twitter.com/john
	URL string `json:"url,omitempty"`

	// username
	// Example: john
	Username string `json:"username,omitempty"`
}

// Validate validates this resume basics profiles items0
func (m *ResumeBasicsProfilesItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this resume basics profiles items0 based on context it is used
func (m *ResumeBasicsProfilesItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ResumeBasicsProfilesItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ResumeBasicsProfilesItems0) UnmarshalBinary(b []byte) error {
	var res ResumeBasicsProfilesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ResumeCertificatesItems0 resume certificates items0
//
// swagger:model ResumeCertificatesItems0
type ResumeCertificatesItems0 struct {

	// date
	// Example: 2021-11-07
	// Format: date
	Date strfmt.Date `json:"date,omitempty"`

	// issuer
	// Example: Company
	Issuer string `json:"issuer,omitempty"`

	// name
	// Example: Certificate
	Name string `json:"name,omitempty"`

	// url
	// Example: https://certificate.com
	URL string `json:"url,omitempty"`
}

// Validate validates this resume certificates items0
func (m *ResumeCertificatesItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ResumeCertificatesItems0) validateDate(formats strfmt.Registry) error {
	if swag.IsZero(m.Date) { // not required
		return nil
	}

	if err := validate.FormatOf("date", "body", "date", m.Date.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this resume certificates items0 based on context it is used
func (m *ResumeCertificatesItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ResumeCertificatesItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ResumeCertificatesItems0) UnmarshalBinary(b []byte) error {
	var res ResumeCertificatesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ResumeEducationItems0 resume education items0
//
// swagger:model ResumeEducationItems0
type ResumeEducationItems0 struct {

	// area
	// Example: Software Development
	Area string `json:"area,omitempty"`

	// courses
	Courses []string `json:"courses"`

	// end date
	// Example: 2013-01-01
	// Format: date
	EndDate strfmt.Date `json:"endDate,omitempty"`

	// institution
	// Example: University
	Institution string `json:"institution,omitempty"`

	// score
	// Example: 4.0
	Score string `json:"score,omitempty"`

	// start date
	// Example: 2011-01-01
	// Format: date
	StartDate strfmt.Date `json:"startDate,omitempty"`

	// study type
	// Example: Bachelor
	StudyType string `json:"studyType,omitempty"`

	// url
	// Example: https://institution.com/
	URL string `json:"url,omitempty"`
}

// Validate validates this resume education items0
func (m *ResumeEducationItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEndDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartDate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ResumeEducationItems0) validateEndDate(formats strfmt.Registry) error {
	if swag.IsZero(m.EndDate) { // not required
		return nil
	}

	if err := validate.FormatOf("endDate", "body", "date", m.EndDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ResumeEducationItems0) validateStartDate(formats strfmt.Registry) error {
	if swag.IsZero(m.StartDate) { // not required
		return nil
	}

	if err := validate.FormatOf("startDate", "body", "date", m.StartDate.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this resume education items0 based on context it is used
func (m *ResumeEducationItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ResumeEducationItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ResumeEducationItems0) UnmarshalBinary(b []byte) error {
	var res ResumeEducationItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ResumeInterestsItems0 resume interests items0
//
// swagger:model ResumeInterestsItems0
type ResumeInterestsItems0 struct {

	// keywords
	Keywords []string `json:"keywords"`

	// name
	// Example: Wildlife
	Name string `json:"name,omitempty"`
}

// Validate validates this resume interests items0
func (m *ResumeInterestsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this resume interests items0 based on context it is used
func (m *ResumeInterestsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ResumeInterestsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ResumeInterestsItems0) UnmarshalBinary(b []byte) error {
	var res ResumeInterestsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ResumeLanguagesItems0 resume languages items0
//
// swagger:model ResumeLanguagesItems0
type ResumeLanguagesItems0 struct {

	// fluency
	// Example: Native speaker
	Fluency string `json:"fluency,omitempty"`

	// language
	// Example: English
	Language string `json:"language,omitempty"`
}

// Validate validates this resume languages items0
func (m *ResumeLanguagesItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this resume languages items0 based on context it is used
func (m *ResumeLanguagesItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ResumeLanguagesItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ResumeLanguagesItems0) UnmarshalBinary(b []byte) error {
	var res ResumeLanguagesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ResumeProjectsItems0 resume projects items0
//
// swagger:model ResumeProjectsItems0
type ResumeProjectsItems0 struct {

	// description
	// Example: Description...
	Description string `json:"description,omitempty"`

	// end date
	// Example: 2021-01-01
	// Format: date
	EndDate strfmt.Date `json:"endDate,omitempty"`

	// highlights
	Highlights []string `json:"highlights"`

	// name
	// Example: Project
	Name string `json:"name,omitempty"`

	// start date
	// Example: 2019-01-01
	// Format: date
	StartDate strfmt.Date `json:"startDate,omitempty"`

	// url
	// Example: https://project.com/
	URL string `json:"url,omitempty"`
}

// Validate validates this resume projects items0
func (m *ResumeProjectsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEndDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartDate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ResumeProjectsItems0) validateEndDate(formats strfmt.Registry) error {
	if swag.IsZero(m.EndDate) { // not required
		return nil
	}

	if err := validate.FormatOf("endDate", "body", "date", m.EndDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ResumeProjectsItems0) validateStartDate(formats strfmt.Registry) error {
	if swag.IsZero(m.StartDate) { // not required
		return nil
	}

	if err := validate.FormatOf("startDate", "body", "date", m.StartDate.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this resume projects items0 based on context it is used
func (m *ResumeProjectsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ResumeProjectsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ResumeProjectsItems0) UnmarshalBinary(b []byte) error {
	var res ResumeProjectsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ResumePublicationsItems0 resume publications items0
//
// swagger:model ResumePublicationsItems0
type ResumePublicationsItems0 struct {

	// name
	// Example: Publication
	Name string `json:"name,omitempty"`

	// publisher
	// Example: Company
	Publisher string `json:"publisher,omitempty"`

	// release date
	// Example: 2014-10-01
	// Format: date
	ReleaseDate strfmt.Date `json:"releaseDate,omitempty"`

	// summary
	// Example: Description…
	Summary string `json:"summary,omitempty"`

	// url
	// Example: https://publication.com
	URL string `json:"url,omitempty"`
}

// Validate validates this resume publications items0
func (m *ResumePublicationsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateReleaseDate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ResumePublicationsItems0) validateReleaseDate(formats strfmt.Registry) error {
	if swag.IsZero(m.ReleaseDate) { // not required
		return nil
	}

	if err := validate.FormatOf("releaseDate", "body", "date", m.ReleaseDate.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this resume publications items0 based on context it is used
func (m *ResumePublicationsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ResumePublicationsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ResumePublicationsItems0) UnmarshalBinary(b []byte) error {
	var res ResumePublicationsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ResumeReferencesItems0 resume references items0
//
// swagger:model ResumeReferencesItems0
type ResumeReferencesItems0 struct {

	// name
	// Example: Jane Doe
	Name string `json:"name,omitempty"`

	// reference
	// Example: Reference…
	Reference string `json:"reference,omitempty"`
}

// Validate validates this resume references items0
func (m *ResumeReferencesItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this resume references items0 based on context it is used
func (m *ResumeReferencesItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ResumeReferencesItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ResumeReferencesItems0) UnmarshalBinary(b []byte) error {
	var res ResumeReferencesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ResumeSkillsItems0 resume skills items0
//
// swagger:model ResumeSkillsItems0
type ResumeSkillsItems0 struct {

	// keywords
	Keywords []strfmt.Base64 `json:"keywords"`

	// level
	// Example: Master
	Level string `json:"level,omitempty"`

	// name
	// Example: Web Development
	Name string `json:"name,omitempty"`
}

// Validate validates this resume skills items0
func (m *ResumeSkillsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this resume skills items0 based on context it is used
func (m *ResumeSkillsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ResumeSkillsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ResumeSkillsItems0) UnmarshalBinary(b []byte) error {
	var res ResumeSkillsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ResumeVolunteerItems0 resume volunteer items0
//
// swagger:model ResumeVolunteerItems0
type ResumeVolunteerItems0 struct {

	// end date
	// Example: 2013-01-01
	// Format: date
	EndDate strfmt.Date `json:"endDate,omitempty"`

	// highlights
	Highlights []string `json:"highlights"`

	// organization
	// Example: Organization
	Organization string `json:"organization,omitempty"`

	// position
	// Example: Volunteer
	Position string `json:"position,omitempty"`

	// start date
	// Example: 2012-01-01
	// Format: date
	StartDate strfmt.Date `json:"startDate,omitempty"`

	// summary
	// Example: Description…
	Summary string `json:"summary,omitempty"`

	// url
	// Example: https://organization.com/
	URL string `json:"url,omitempty"`
}

// Validate validates this resume volunteer items0
func (m *ResumeVolunteerItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEndDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartDate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ResumeVolunteerItems0) validateEndDate(formats strfmt.Registry) error {
	if swag.IsZero(m.EndDate) { // not required
		return nil
	}

	if err := validate.FormatOf("endDate", "body", "date", m.EndDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ResumeVolunteerItems0) validateStartDate(formats strfmt.Registry) error {
	if swag.IsZero(m.StartDate) { // not required
		return nil
	}

	if err := validate.FormatOf("startDate", "body", "date", m.StartDate.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this resume volunteer items0 based on context it is used
func (m *ResumeVolunteerItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ResumeVolunteerItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ResumeVolunteerItems0) UnmarshalBinary(b []byte) error {
	var res ResumeVolunteerItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ResumeWorkItems0 resume work items0
//
// swagger:model ResumeWorkItems0
type ResumeWorkItems0 struct {

	// end date
	// Example: 2014-01-01
	// Format: date
	EndDate strfmt.Date `json:"endDate,omitempty"`

	// highlights
	Highlights []string `json:"highlights"`

	// name
	// Example: Company
	Name string `json:"name,omitempty"`

	// position
	// Example: President
	Position string `json:"position,omitempty"`

	// start date
	// Example: 2013-01-01
	// Format: date
	StartDate strfmt.Date `json:"startDate,omitempty"`

	// summary
	// Example: Description…
	Summary string `json:"summary,omitempty"`

	// url
	// Example: https://company.com
	URL string `json:"url,omitempty"`
}

// Validate validates this resume work items0
func (m *ResumeWorkItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEndDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartDate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ResumeWorkItems0) validateEndDate(formats strfmt.Registry) error {
	if swag.IsZero(m.EndDate) { // not required
		return nil
	}

	if err := validate.FormatOf("endDate", "body", "date", m.EndDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ResumeWorkItems0) validateStartDate(formats strfmt.Registry) error {
	if swag.IsZero(m.StartDate) { // not required
		return nil
	}

	if err := validate.FormatOf("startDate", "body", "date", m.StartDate.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this resume work items0 based on context it is used
func (m *ResumeWorkItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ResumeWorkItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ResumeWorkItems0) UnmarshalBinary(b []byte) error {
	var res ResumeWorkItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
